"use strict";(self.webpackChunkumass_compsci_220_github_io=self.webpackChunkumass_compsci_220_github_io||[]).push([[159],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,k=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(k,l(l({ref:t},p),{},{components:n})):a.createElement(k,l({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7794:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:4},l="Closures and Iterators",o={unversionedId:"homework/closures-and-iterators",id:"homework/closures-and-iterators",title:"Closures and Iterators",description:"- Please download the project here.",source:"@site/materials/homework/closures-and-iterators.md",sourceDirName:"homework",slug:"/homework/closures-and-iterators",permalink:"/materials/homework/closures-and-iterators",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Lists",permalink:"/materials/homework/lists"},next:{title:"Discussion",permalink:"/materials/category/discussion"}},s={},u=[{value:"Overview",id:"overview",level:2},{value:"Learning Objectives",id:"learning-objectives",level:3},{value:"Student Expectations",id:"student-expectations",level:3},{value:"Testing",id:"testing",level:2},{value:"Programming Tasks",id:"programming-tasks",level:2},{value:"<code>composeList</code>",id:"composelist",level:3},{value:"<code>composeFunctions</code>",id:"composefunctions",level:3},{value:"<code>composeBinary</code>",id:"composebinary",level:3},{value:"<code>enumRatios</code>",id:"enumratios",level:3},{value:"<code>cycleArr</code>",id:"cyclearr",level:3},{value:"Example",id:"example",level:4},{value:"<code>dovetail</code>",id:"dovetail",level:3},{value:"Example",id:"example-1",level:4},{value:"Submission",id:"submission",level:2}],p={toc:u},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"closures-and-iterators"},"Closures and Iterators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Please download the project ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/umass-compsci-220/public-materials/raw/main/homework/04-closures-iterators.zip"},"here"),"."),(0,r.kt)("li",{parentName:"ul"},"You may edit any file inside ",(0,r.kt)("inlineCode",{parentName:"li"},"./src"),". ",(0,r.kt)("strong",{parentName:"li"},"DO NOT make any edits to any file inside ",(0,r.kt)("inlineCode",{parentName:"strong"},"./include"),"."))),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("h3",{id:"learning-objectives"},"Learning Objectives"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Practice working with and reasoning about closures."),(0,r.kt)("li",{parentName:"ul"},"Practice working with and reasoning about iterators.")),(0,r.kt)("h3",{id:"student-expectations"},"Student Expectations"),(0,r.kt)("p",null,"Students will be graded on their ability to:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Correctly implement the ",(0,r.kt)("a",{parentName:"li",href:"#programming-tasks"},"programming tasks"),"."),(0,r.kt)("li",{parentName:"ul"},"Resolve all linter warnings."),(0,r.kt)("li",{parentName:"ul"},"Follow\nthe ",(0,r.kt)("a",{parentName:"li",href:"/materials/guidelines/syntax-and-code"},"syntax and code"),", ",(0,r.kt)("a",{parentName:"li",href:"/materials/guidelines/bad-practices"},"bad practices"),"\nand ",(0,r.kt)("a",{parentName:"li",href:"/materials/guidelines/testing"},"testing")," guidelines."),(0,r.kt)("li",{parentName:"ul"},"Design full-coverage unit tests for the implemented functions.",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"See the ",(0,r.kt)("a",{parentName:"li",href:"/materials/guidelines/testing#coverage"},"testing guidelines on coverage")," for more details."),(0,r.kt)("li",{parentName:"ul"},"Make sure you are calling all functions, including functions returned by functions you write.")))),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"You must write tests for all your functions, following the principles used so far."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/materials/tutorials/assignments/testing"},"Testing tutorial")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/materials/guidelines/testing"},"Testing guidelines"))),(0,r.kt)("p",null,"It may helpful to write some tests first to make sure your implementation addresses those cases."),(0,r.kt)("h2",{id:"programming-tasks"},"Programming Tasks"),(0,r.kt)("h3",{id:"composelist"},(0,r.kt)("inlineCode",{parentName:"h3"},"composeList")),(0,r.kt)("p",null,"Write a function that takes as input a list of functions, potentially empty. Each function has the signature ",(0,r.kt)("inlineCode",{parentName:"p"},"T => T"),".\nReturn a function with the signature ",(0,r.kt)("inlineCode",{parentName:"p"},"T => T")," that when called on a value of type ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," will return the value obtained by\nsuccessively applying all functions in the list, in order. ",(0,r.kt)("em",{parentName:"p"},"Do not use loops.")),(0,r.kt)("h3",{id:"composefunctions"},(0,r.kt)("inlineCode",{parentName:"h3"},"composeFunctions")),(0,r.kt)("p",null,"Write a function that takes as input an array of functions of type ",(0,r.kt)("inlineCode",{parentName:"p"},"(x: T) => T"),", potentially empty, and returns a\nclosure that takes a value ",(0,r.kt)("inlineCode",{parentName:"p"},"v: T")," and returns an array of the values obtained by starting with ",(0,r.kt)("inlineCode",{parentName:"p"},"v")," and successively\napplying zero, one, two, ..., all functions of the array. That is, the array returned by the closure is\n",(0,r.kt)("inlineCode",{parentName:"p"},"[v, f0(v), f1(f0(v)), ...]")," if the array of functions is ",(0,r.kt)("inlineCode",{parentName:"p"},"[f0, f1, ...]"),"."),(0,r.kt)("h3",{id:"composebinary"},(0,r.kt)("inlineCode",{parentName:"h3"},"composeBinary")),(0,r.kt)("p",null,"Write a function that takes an array of functions ",(0,r.kt)("inlineCode",{parentName:"p"},"(arg1: T, arg2: U) => T"),", potentially empty, as input.\nIt returns a closure that takes an input ",(0,r.kt)("inlineCode",{parentName:"p"},"in: U")," and returns a function ",(0,r.kt)("inlineCode",{parentName:"p"},"T => T"),".\nThe returned closure is equivalent to using ",(0,r.kt)("inlineCode",{parentName:"p"},"arg2")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"in")," for all functions, and applying them successively\nto an input ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"arg1"),", using the result of the previous function as input. ",(0,r.kt)("em",{parentName:"p"},"Do not use loops.")),(0,r.kt)("h3",{id:"enumratios"},(0,r.kt)("inlineCode",{parentName:"h3"},"enumRatios")),(0,r.kt)("p",null,"Write a function that returns a closure with no arguments. On each call, the closure should return a new rational number\nfrom the sequence:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 / 1,"),(0,r.kt)("li",{parentName:"ul"},"2 / 1, 1 / 2,"),(0,r.kt)("li",{parentName:"ul"},"3 / 1, 2 / 2, 1 / 3,"),(0,r.kt)("li",{parentName:"ul"},"4 / 1, 3 / 2, 2 / 3, 1 / 4, ...\nwhere the numbers are ordered by increasing sum of numerator and denominator, with a decreasing numerator in each group.\nDo not repeat numbers, e.g., omit 2 / 2 since it is equal to 1 / 1.")),(0,r.kt)("h3",{id:"cyclearr"},(0,r.kt)("inlineCode",{parentName:"h3"},"cycleArr")),(0,r.kt)("p",null,"Write a function that takes an array of arrays and returns an iterator that yields all array elements as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"first element of each array,"),(0,r.kt)("li",{parentName:"ul"},"second element of each array, etc., until all elements are exhausted.")),(0,r.kt)("p",null,"Skip arrays that have been exhausted."),(0,r.kt)("h4",{id:"example"},"Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Input"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"[[1, 2, 3], [4, 5], [6, 7, 8, 9]]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Output"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"1, 4, 6, 2, 5, 7, 3, 8, 9"))),(0,r.kt)("h3",{id:"dovetail"},(0,r.kt)("inlineCode",{parentName:"h3"},"dovetail")),(0,r.kt)("p",null,"Write a function that takes an array of lists and returns an iterator that yields all list elements as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"one element from the first list,"),(0,r.kt)("li",{parentName:"ul"},"two more elements, one from each of the first two lists,"),(0,r.kt)("li",{parentName:"ul"},"..."),(0,r.kt)("li",{parentName:"ul"},"k more elements, one from each of the first k lists"),(0,r.kt)("li",{parentName:"ul"},"...\nuntil all elements are exhausted.")),(0,r.kt)("p",null,"Simply omit any elements that don't exist (from lists that have been exhausted, or are numbered higher than the array length)."),(0,r.kt)("h4",{id:"example-1"},"Example"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Input"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"[1 -> 2 -> 3, 4 -> 5, 6 -> 7 -> 8 -> 9]")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Output"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"1, 2, 4, 3, 5, 6, 7, 8, 9"))),(0,r.kt)("h2",{id:"submission"},"Submission"),(0,r.kt)("p",null,"Use the following command to build a zip file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm run build:submission\n")),(0,r.kt)("p",null,"Please upload the zip file created by the command to Gradescope."))}c.isMDXComponent=!0}}]);